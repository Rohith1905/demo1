import java.util.*;
public class TopologicalSort { private int V; // Number of vertices private List<Integer>
adjList[];
public TopologicalSort(int v) { V = v;
adjList = new LinkedList[v]; for (int i = 0; i < v; ++i)
adjList[i] = new LinkedList<>(); }
// Function to add an edge to the graph private void addEdge(int v, int w) {
adjList[v].add(w); }
// Recursive function to perform topological sort
private void topologicalSortUtil(int v, boolean visited[], Stack<Integer> stack) {
visited[v] = true;
for (Integer neighbor : adjList[v]) { if (!visited[neighbor])
topologicalSortUtil(neighbor, visited, stack); }
stack.push(v); }
// Function to perform topological sort private void topologicalSort() {
Stack<Integer> stack = new Stack<>();boolean visited[] = new boolean[V]; Arrays.fill(visited, false);
for (int i = 0; i < V; ++i) { if (!visited[i])
topologicalSortUtil(i, visited, stack); }
// Print the topological order System.out.println("Topological Sort:"); while (!stack.isEmpty())
System.out.print(stack.pop() + " "); }
public static void main(String args[]) {
Scanner scanner = new Scanner(System.in);
// Taking input for the number of vertices System.out.print("Enter the number of vertices: "); int
V = scanner.nextInt();
TopologicalSort g = new TopologicalSort(V);
// Taking input for the adjacency matrix System.out.println("Enter the adjacency matrix:"); for
(int i = 0; i < V; i++) {
for (int j = 0; j < V; j++) {
if (scanner.nextInt() == 1) {
g.addEdge(i, j); }
}}
g.topologicalSort();
scanner.close(); }
}

////-end-//
//Warshall's-Algo. (5-B)
import java.util.Scanner;
public class WarshallsAlgorithm {
public static void main(String[] args) {Scanner scanner = new Scanner(System.in);
// Get the number of vertices System.out.print("Enter the number of vertices: "); int vertices =
scanner.nextInt();
// Initialize the adjacency matrix
int[][] graph = new int[vertices][vertices];
// Get the adjacency matrix from the user
System.out.println("Enter the adjacency matrix (0 for no edge, 1 for edge):"); for (int i = 0; i <
vertices; i++) {
for (int j = 0; j < vertices; j++) { graph[i][j] = scanner.nextInt();
}}
// Find the transitive closure using Warshall's Algorithm for (int k = 0; k < vertices; k++) {
for (int i = 0; i < vertices; i++) { for (int j = 0; j < vertices; j++) {
graph[i][j] = graph[i][j] | (graph[i][k] & graph[k][j]); }
}}
// Display the transitive closure System.out.println("Transitive Closure:"); for (int i = 0; i <
vertices; i++) {
for (int j = 0; j < vertices; j++) { System.out.print(graph[i][j] + " ");
}
System.out.println(); }
scanner.close(); }
}
