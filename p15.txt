import java.util.ArrayList;
import java.util.Arrays;
public class Subset {
public static void main(String[] args) {
int[] set = {3, 34, 4, 12, 5, 2};
int sum = 17;
ArrayList<Integer> subset = findSubsetSum(set, sum);
System.out.println("Input Set: " + Arrays.toString(set));
System.out.println("Target Sum: " + sum);
System.out.println("Subset with Sum: " + subset);
}private static ArrayList<Integer> findSubsetSum(int[] set, int sum) {
int n = set.length;
boolean[][] dp = new boolean[n + 1][sum + 1];
// Initialize the first column as true, since the sum 0 is always
possible
for (int i = 0; i <= n; i++) {
dp[i][0] = true;
}
// Fill the dp array using bottom-up dynamic programming
for (int i = 1; i <= n; i++) {
for (int j = 1; j <= sum; j++) {
dp[i][j] = dp[i - 1][j];
if (j >= set[i - 1]) {
dp[i][j] = dp[i][j] || dp[i - 1][j - set[i - 1]];
}
}
}
// Reconstruct the subset
ArrayList<Integer> subset = new ArrayList<>();
int i = n, j = sum;
while (i > 0 && j > 0) {
if (dp[i][j] && !dp[i - 1][j]) {
subset.add(set[i - 1]);
j -= set[i - 1];
}
i--;
}
return subset;
}
}
